# https://colab.research.google.com/drive/1KPWd4gbEh6AcE1PM8F1XxC6gbyNRu8bR

# -*- coding: utf-8 -*-
"""2차과제_최종

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KPWd4gbEh6AcE1PM8F1XxC6gbyNRu8bR
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import numpy as np
import pandas as pd

torch.manual_seed(42)

df = pd.read_excel('인공지능 두뇌지수 데이터_1024.xlsx', header=0, usecols=[1,2,3,4,5,6,8,9,10,11,14],dtype=np.float64)
 df.to_excel('data.xlsx',sheet_name="data")
 #df

from sklearn.model_selection import train_test_split
data_train, data_test = train_test_split(df, test_size=0.1, random_state=0)
#data_train.shape, data_test.shape

#print(data_train, data_train)

train_data = np.array(data_train)
test_data = np.array(data_test)
#print(train_data, train_data.shape)

x_train = torch.FloatTensor(train_data[:,0:-1])
y_train = torch.FloatTensor(train_data[:,[-1]])
x_test = torch.FloatTensor(test_data[:,0:-1])
y_test = torch.FloatTensor(test_data[:,[-1]])
#print(x_test, x_test.shape)
#print(y_train, y_train.shape)

print(x_train.shape, y_train.shape)

W = torch.zeros((10, 1), requires_grad=True)
b = torch.zeros(1, requires_grad=True)
optimizer = optim.SGD([W, b], lr=1e-7)

nb_epochs = 100000
for epoch in range(nb_epochs + 1):
  hypothesis = x_train.matmul(W) + b
  cost = torch.mean((hypothesis - y_train) ** 2)

  optimizer.zero_grad()
  cost.backward()
  optimizer.step()

  if epoch % 5000 == 0:
        print('Epoch {:4d}/{} Cost: {:.6f}'.format(
            epoch, nb_epochs, cost.item()
        ))
print("Train Done")

prediction = x_test.matmul(W) + b
#print(prediction, y_test)
#accuracy = (((prediction - y_test)**2)**0.5 / y_test) * 100
#print(prediction, y_test)
print(prediction)
print(y_test)

